/*
 * MHC Genotyping Pipeline Configuration
 */

// Pipeline parameters with defaults
params {
    // Input/output parameters
    barcode_dir      = null
    reference        = "${projectDir}/../ref/reference.fasta"
    primers          = "${projectDir}/../ref/mhc_specific_primers.fa"
    fluidigm_barcodes = "${projectDir}/../ref/fluidigm.txt"
    sample_sheet     = "${projectDir}/../ref/sample_mapping.csv"
    outdir           = "${projectDir}/../results"

    // Processing parameters
    min_reads        = 10      // Minimum reads for haplotype calling
    mismatch         = 2       // Maximum mismatches allowed in primer matching
    
    // Resource parameters
    max_memory       = '8.GB'
    max_cpus         = 4
    max_time         = '12.h'
}

// Process-specific resource requirements
process {
    // Default resources
    cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h * task.attempt, 'time' ) }
    
    // Error strategy
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'
    
    // Process-specific resources
    withName:CONCATENATE_BARCODES {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withName:ORIENT_READS {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }
    
    withName:DEMULTIPLEX {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 6.h * task.attempt, 'time' ) }
    }
    
    withName:FILTER_TRIM_PRIMERS {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }
    
    withName:MAP_READS {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withName:FILTER_FULLSPAN {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
        time   = { check_max( 30.m * task.attempt, 'time' ) }
    }
    
    withName:COUNT_ALLELES {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
        time   = { check_max( 30.m * task.attempt, 'time' ) }
    }
    
    withName:AGGREGATE_COUNTS {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }
    
    withName:CALL_HAPLOTYPES {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }
}

// Execution profiles
profiles {
    // Standard profile - uses local executor
    standard {
        process.executor = 'local'
    }
    
    // Debug profile - adds more verbose logging
    debug {
        process.beforeScript = 'echo $HOSTNAME'
        cleanup = false
        trace.enabled = true
        trace.file = "${params.outdir}/pipeline_info/execution_trace.txt"
        report.enabled = true
        report.file = "${params.outdir}/pipeline_info/execution_report.html"
        timeline.enabled = true
        timeline.file = "${params.outdir}/pipeline_info/execution_timeline.html"
        dag.enabled = true
        dag.file = "${params.outdir}/pipeline_info/pipeline_dag.pdf"
    }
    
    // Conda/Mamba profile
    conda {
        process.conda = "${projectDir}/../environment.yml"
        conda.enabled = true
    }
    
    // Docker profile
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        process.container = 'mhc-genotyping:latest'
    }
    
    // Singularity profile
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'mhc-genotyping.sif'
    }
    
    // SLURM profile for HPC clusters
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
            clusterOptions = '--account=myaccount'
        }
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Timeline and report configuration
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.pdf"
}

// Function to check resource requirements
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name            = 'mhc-genotyping'
    author          = 'MHC Genotyping Pipeline'
    homePage        = 'https://github.com/yourusername/mhc-genotyping'
    description     = 'Nextflow pipeline for MHC genotyping from MiSeq data'
    mainScript      = 'mhc_genotyping.nf'
    nextflowVersion = '>=21.04.0'
    version         = '1.0.0'
}